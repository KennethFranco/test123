(()=>{"use strict";var e={300:(e,t)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r)return r;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}(()=>{const e={$arrayCompact:e=>`ARRAYCOMPACT(${H(e)})`,$arrayFlatten:e=>`ARRAYFLATTEN(${H(e)})`,$arrayUnique:e=>`ARRAYUNIQUE(${H(e)})`,$arrayJoin:(e,t=",")=>`ARRAYJOIN(${H(e)}, ${H(t)})`},t=(e,t,r)=>Object.prototype.hasOwnProperty.call(e,t)&&(void 0===r||r(e[t])),n=e=>{if(void 0===e)throw new Error("Missing Query Object");return null!==e&&"object"==typeof e&&!Array.isArray(e)},i=e=>$(e)||n(e),o=e=>u(e)||n(e),s=e=>l(e)||n(e),a=e=>e instanceof Array&&e.every((e=>n(e))),c=e=>n(e)&&"string"==typeof e.$fieldName,d=e=>"string"==typeof e,$=e=>d(e)||c(e),u=e=>"number"==typeof e||c(e),l=e=>"boolean"==typeof e||c(e),p=e=>e.every((e=>null!=e)),f=e=>"object"!=typeof e&&"function"!=typeof e||null===e,h={$and:e=>`AND(${H(e)})`,$or:e=>`OR(${H(e)})`,$xor:e=>`XOR(${H(e)})`},y={$not:e=>`NOT(${H(e)})`,$isError:e=>`ISERROR(${H(e)})`},v={$if:({expression:e,ifTrue:t,ifFalse:r})=>`IF(${H(e)}, ${H(t)}, ${H(r)})`},b={$switch:({expression:e,cases:t,defaultVal:r})=>`SWITCH(${H(e)}, ${t.slice(0).map((({switchCase:e,val:t})=>`${H(e)}, ${H(t)}`)).join(", ")}, ${H(r)})`},w=Object.assign(Object.assign(Object.assign(Object.assign({},h),y),v),b),m=[{$eq:"="},{$neq:"!="},{$gt:">"},{$gte:">="},{$lt:"<"},{$lte:"<="},{$add:"+"},{$sub:"-"},{$multi:"*"},{$div:"/"}],g=(e,t)=>{if("object"!=typeof e||Array.isArray(e))throw new Error("Missing or Invalid Comparison Object");if("string"!=typeof t&&!m.map((e=>Object.values(e)[0])).includes(t))throw new Error("Missing or Invalid Comparison Operator");const r=Object.keys(e),n=`${r.map(((n,i)=>{const o=H(e[n]);return`{${n}} ${t} ${o}${i<r.length-1?", ":""}`})).join("")}`;return r.length>1?`AND(${n})`:n},O={$gt:e=>g(e,">"),$lt:e=>g(e,"<"),$gte:e=>g(e,">="),$lte:e=>g(e,"<="),$eq:e=>g(e,"="),$neq:e=>g(e,"!=")},R={$find:({stringToFind:e,whereToSearch:t,index:r})=>`FIND(${H(e)}, ${H(t)}, ${null!=r?r:0})`,$search:({stringToFind:e,whereToSearch:t,index:r})=>`SEARCH(${H(e)}, ${H(t)}, ${null!=r?r:0})`},j={$replace:({text:e,startChar:t,numChars:r,replacement:n})=>`REPLACE(${H(e)}, ${H(t)}, ${H(r)}, ${H(n)})`},E={$substitute:({text:e,oldText:t,newText:r,index:n})=>`SUBSTITUTE(${H(e)}, ${H(t)}, ${H(r)}, ${null!=n?n:0})`},x={$concatenate:e=>`CONCATENATE(${e.map((e=>H(e))).join(", ")})`},A={$left:({text:e,num:t})=>`LEFT(${H(e)}, ${H(t)})`,$right:({text:e,num:t})=>`RIGHT(${H(e)}, ${H(t)})`,$rept:({text:e,num:t})=>`REPT(${H(e)}, ${H(t)})`},T={$mid:({text:e,whereToStart:t,num:r})=>`MID(${H(e)}, ${H(t)}, ${H(r)})`},C={$encodeUrlComponent:e=>`ENCODE_URL_COMPONENT(${H(e)})`,$len:e=>`LEN(${H(e)})`,$lower:e=>`LOWER(${H(e)})`,$trim:e=>`TRIM(${H(e)})`,$upper:e=>`UPPER(${H(e)})`},U=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},R),x),T),j),E),A),C),N=(e,r)=>{if(e in R&&n(a=r)&&t(a,"stringToFind",i)&&t(a,"whereToSearch",i)&&(!t(a,"index")||o(a.index)))return R[e](r);if(e in x&&((s=r)instanceof Array&&s.every((e=>i(e)))))return x[e](r);var s,a;if(e in T&&(e=>!!(n(e)&&t(e,"text",i)&&t(e,"whereToStart",o)&&t(e,"num",o)))(r))return T[e](r);if(e in j&&(e=>!!(n(e)&&t(e,"text",i)&&t(e,"startChar",o)&&t(e,"numChars",o)&&t(e,"replacement",i)))(r))return j[e](r);if(e in E&&(e=>!(!(n(e)&&t(e,"text",i)&&t(e,"oldText",i)&&t(e,"newText",i))||t(e,"index")&&!o(e.index)))(r))return E[e](r);if(e in A&&(e=>!!(n(e)&&t(e,"text",i)&&t(e,"num",o)))(r))return A[e](r);if(e in C&&($(r)||n(r)))return C[e](r);throw J({key:e,val:r})},I={$regexMatch:({text:e,regex:t})=>`REGEX_MATCH(${H(e)}, ${H(t)})`,$regexExtract:({text:e,regex:t})=>`REGEX_EXTRACT(${H(e)}, ${H(t)})`},L={$regexReplace:({text:e,regex:t,replacement:r})=>`REGEX_REPLACE(${H(e)}, ${H(t)}, ${H(r)})`},S={$abs:e=>`ABS(${H(e)})`,$even:e=>`EVEN(${H(e)})`,$exp:e=>`EXP(${H(e)})`,$int:e=>`INT(${H(e)})`,$odd:e=>`ODD(${H(e)})`,$sqrt:e=>`SQRT(${H(e)})`},B={$avg:e=>`AVERAGE(${e.map((e=>H(e))).join(", ")})`,$count:e=>`COUNT(${e.map((e=>H(e))).join(", ")})`,$counta:e=>`COUNTA(${e.map((e=>H(e))).join(", ")})`,$countAll:e=>`COUNTALL(${e.map((e=>H(e))).join(", ")})`,$max:e=>`MAX(${e.map((e=>H(e))).join(", ")})`,$min:e=>`MIN(${e.map((e=>H(e))).join(", ")})`,$sum:e=>`SUM(${e.map((e=>H(e))).join(", ")})`},P={$ceil:({val:e,significance:t})=>`CEILING(${H(e)}, ${H(null!=t?t:1)})`,$floor:({val:e,significance:t})=>`FLOOR(${H(e)}, ${H(null!=t?t:1)})`},F={$log:({num:e,base:t})=>`LOG(${H(e)}, ${H(null!=t?t:10)})`},D={$mod:({val:e,divisor:t})=>`MOD(${H(e)}, ${H(t)})`},M={$pow:({base:e,power:t})=>`POWER(${H(e)}, ${H(t)})`},q={$round:({val:e,precision:t})=>`ROUND(${H(e)}, ${H(t)})`,$roundDown:({val:e,precision:t})=>`ROUNDDOWN(${H(e)}, ${H(t)})`,$roundUp:({val:e,precision:t})=>`ROUNDUP(${H(e)}, ${H(t)})`},k=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},S),B),P),F),D),M),q),K={$add:e=>g(e,"+"),$sub:e=>g(e,"-"),$multi:e=>g(e,"*"),$div:e=>g(e,"/")},z=Object.assign(Object.assign({},O),K),J=e=>new Error(`Invalid Query Object, ${JSON.stringify(e)}`),H=r=>{if(void 0!==r){if((e=>!(!e||"function"!=typeof e||"string"!=typeof e()))(r)&&!f(r)&&!n(r))return r();if(f(r))return(e=>{if(null===e)return"BLANK()";switch(typeof e){case"number":return`${e}`;case"string":return`'${e}'`;case"boolean":return e?"TRUE()":"FALSE()"}})(r);if(r instanceof Array)return r.map((e=>H(e))).join(", ").trim();const c=Object.keys(r),$=Object.values(r);if(c.length>1&&p($)&&a(c.map(((e,t)=>({[e]:$[t]})))))return w.$and(c.map(((e,t)=>({[e]:$[t]}))));const u=c[0];if(void 0===r[u])throw new Error("Invalid query");const l=r[u];if(void 0!==l){if("$fieldName"===u&&d(l))return`{${l}}`;if("$insert"===u&&d(l))return l;if(u in w)return((e,r)=>{if(e in h&&a(r))return h[e](r);if(e in y&&n(r))return y[e](r);if(e in v&&n(i=r)&&t(i,"expression",s)&&t(i,"ifTrue")&&t(i,"ifFalse"))return v[e](r);if(e in b&&(e=>!!(n(e)&&t(e,"expression",s)&&t(e,"cases")&&e.cases instanceof Array&&e.cases.every((e=>n(e)&&t(e,"switchCase")&&t(e,"val")))&&t(e,"defaultVal")))(r))return b[e](r);var i;throw J({key:e,val:r})})(u,l);if(u in U)return N(u,l);if(u in k)return((e,r)=>{if(e in B&&(s=r)instanceof Array&&s.every((e=>o(e))))return B[e](r);if(e in S&&o(r))return S[e](r);if(e in P&&n(i=r)&&t(i,"val",o)&&(!t(i,"significance")||o(i.significance)))return P[e](r);if(e in F&&(e=>!(n(e)&&t(e,"num")&&t(e,"base")&&!o(e.base)))(r))return F[e](r);if(e in D&&(e=>!!(n(e)&&t(e,"val",o)&&t(e,"divisor",o)))(r))return D[e](r);if(e in M&&(e=>!!(n(e)&&t(e,"base",o)&&t(e,"power",o)))(r))return M[e](r);if(e in q&&(e=>!!(n(e)&&t(e,"val",o)&&t(e,"precision",o)))(r))return q[e](r);var i,s;throw J({key:e,val:r})})(u,l);if(u in I&&(e=>!!(n(e)&&t(e,"text",i)&&t(e,"regex",i)))(l))return I[u](l);if(u in L&&(e=>!!(n(e)&&t(e,"text",i)&&t(e,"regex",i)&&t(e,"replacement",i)))(l))return I[u](l);if(u in e){if((e=>!(!n(e)||!e.val))(l))return e.$arrayJoin(l.val,l.separator);if("string"==typeof l)return e[u](l)}else if(n(l)){const e=Object.keys(l),t=Object.values(l);if(e.length>1&&p(t)&&a(e.map(((e,r)=>({[e]:t[r]}))))&&t.every((e=>n(e)||f(e)))){if(e.every((e=>e in O)))return w.$and(e.map(((e,r)=>({[u]:{[e]:t[r]}}))));if(e.every((e=>e in K)))return""}const r=e[0],i=t[0];if(r in z&&(n(i)||f(i)))return z[r]({[u]:i})}else if(n(l)||f(l))return z.$eq({[u]:l})}}throw J(r)},G=e=>{if(Object.prototype.hasOwnProperty.call(e,"filterByFormula")&&Object.prototype.hasOwnProperty.call(e,"where"))throw new Error("Cannot use both where and filterByFormula as they accomplish the same thing");return Object.keys(e).map(((t,r)=>{const n=e[t];let i;return i=Array.isArray(n)?n.map(((e,r)=>{switch(typeof e){case"object":return Object.keys(e).map((n=>`${encodeURIComponent(`${t}[${r}][${n}]`)}=${encodeURIComponent(e[n])}`)).join("&");case"string":return`${encodeURIComponent(t+"[]")}=${encodeURIComponent(e)}`}})).join("&"):"where"===t?`filterByFormula=${encodeURIComponent(H(n))}`:`${t}=${encodeURIComponent(n)}`,0!==r?`&${i}`:i})).join("")},X=(e,t,r,n=!0)=>{if(void 0===e&&n)throw new Error(`Argument "${t}" is required.`);if((void 0!==e||n)&&typeof e!==r){if("array"===r&&Array.isArray(e))return;throw new Error(`Incorrect data type on argument "${t}". Received "${typeof e}": expected "${r}"`)}};var _=r(300);const Q="undefined"!=typeof window?window.fetch.bind(window):_;var V=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const W=({endpoint:e,options:t,instance:r,pageHandler:n})=>{return i=void 0,o=void 0,a=function*(){try{const d=yield Q(e,t),$=yield d.json();if(d.status>=300){if(429!==d.status)throw new Error(JSON.stringify($));if(r.retryOnRateLimit&&(!n||n.index+1===n.page))return yield(i=e,o=null!=t?t:{},s=r.retryTimeout,a=r.maxRetry,V(void 0,void 0,void 0,(function*(){return new Promise(((e,t)=>{const r=(n,i,o,s,a)=>{s&&s<1&&t("Max timeout exceeded"),setTimeout((()=>V(void 0,void 0,void 0,(function*(){try{const t=yield Q(n,i),c=yield t.json();429===t.status?r(n,i,1.5*o,s-o,a):e(c)}catch(e){t(e)}}))),o)};r(i,o,s,a,c)}))})))}return $}catch(e){throw new Error(e)}var i,o,s,a,c},new((s=void 0)||(s=Promise))((function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function n(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(e){e(i)}))).then(r,n)}c((a=a.apply(i,o||[])).next())}));var i,o,s,a};var Y=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Z=["fields","filterByFormula","maxRecords","pageSize","sort","view","where"];"undefined"!=typeof window&&(window.AsyncAirtable=class{constructor(e,t,r){if(this.select=(e,t,r)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"options","object",!1),X(r,"page","number",!1);const n=`${this.baseURL}/${this.base}/${e}`,i=t?Object.assign({},t):{};Object.keys(i).forEach((e=>{if(!Z.includes(e))throw new Error(`Invalid option: ${e}`)}));let o="",s=[];if(r)for(let e=0;e<r;e++){o&&(i.offset=o);try{const t=yield W({endpoint:`${n}?${G(i)}`,options:{headers:{Authorization:`Bearer ${this.apiKey}`}},instance:this,pageHandler:{index:e,page:r}});if(e+1===r)return t.records;o=t.offset}catch(e){throw new Error(e)}}else{let e=!1;for(;!e;){o&&(i.offset=o);try{const t=yield W({endpoint:`${n}?${G(i)}`,options:{headers:{Authorization:`Bearer ${this.apiKey}`}},instance:this});s=s.concat(t.records),o=t.offset,t.offset||(e=!0)}catch(e){throw new Error(e)}}}return s}catch(e){throw new Error(e)}})),this.find=(e,t)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"id","string");const r=`${this.baseURL}/${this.base}/${e}/${t}`;return yield W({endpoint:r,options:{headers:{Authorization:`Bearer ${this.apiKey}`}},instance:this})}catch(e){throw new Error(e)}})),this.createRecord=(e,t,r)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"record","object"),X(r,"typecast","boolean",!1);const n=`${this.baseURL}/${this.base}/${e}`,i={fields:t};return void 0!==r&&(i.typecast=r),yield W({endpoint:n,instance:this,options:{method:"post",body:JSON.stringify(i),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}})}catch(e){throw new Error(e)}})),this.updateRecord=(e,t,r)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"record","object"),r&&(X(r.destructive,"opts.desctructive","boolean"),X(r.typecast,"opts.typecast","boolean",!1));const n=`${this.baseURL}/${this.base}/${e}/${t.id}`,i={fields:t.fields};return void 0!==(null==r?void 0:r.typecast)&&(i.typecast=null==r?void 0:r.typecast),yield W({endpoint:n,instance:this,options:{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}})}catch(e){throw new Error(e)}})),this.deleteRecord=(e,t)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"id","string");const r=`${this.baseURL}/${this.base}/${e}/${t}`;return yield W({endpoint:r,instance:this,options:{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}}})}catch(e){throw new Error(e)}})),this.bulkCreate=(e,t,r)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"records","array"),X(r,"typecast","boolean",!1);const n=`${this.baseURL}/${this.base}/${e}`,i={records:t.map((e=>({fields:e})))};return void 0!==r&&(i.typecast=r),(yield W({endpoint:n,options:{method:"post",body:JSON.stringify(i),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},instance:this})).records}catch(e){throw new Error(e)}})),this.bulkUpdate=(e,t,r)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"records","array"),r&&(X(r.destructive,"opts.desctructive","boolean",!1),X(r.typecast,"opts.typecast","boolean",!1));const n=`${this.baseURL}/${this.base}/${e}`,i={records:t};return void 0!==(null==r?void 0:r.typecast)&&(i.typecast=null==r?void 0:r.typecast),(yield W({endpoint:n,options:{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},instance:this})).records}catch(e){throw new Error(e)}})),this.bulkDelete=(e,t)=>Y(this,void 0,void 0,(function*(){try{X(e,"table","string"),X(t,"ids","array");let r="";t.forEach(((e,t)=>{r=0!==t?`${r}&records[]=${e}`:`records[]=${e}`}));const n=`${this.baseURL}/${this.base}/${e}?${encodeURI(r)}`;return(yield W({endpoint:n,options:{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}},instance:this})).records}catch(e){throw new Error(e)}})),this.upsertRecord=(e,t,r,n)=>Y(this,void 0,void 0,(function*(){X(e,"table","string"),X(t,"filterString","string"),X(r,"record","object"),n&&(X(n.destructive,"opts.desctructive","boolean",!1),X(n.typecast,"opts.typecast","boolean",!1));const i=yield this.select(e,{filterByFormula:t});return i[0]?yield this.updateRecord(e,{id:i[0].id,fields:r},n):yield this.createRecord(e,r,null==n?void 0:n.typecast)})),!e)throw new Error("API Key is required.");if(!t)throw new Error("Base ID is required.");this.apiKey=e,this.base=t,this.retryOnRateLimit=(null==r?void 0:r.retryOnRateLimit)||!0,this.retryTimeout=(null==r?void 0:r.retryTimeout)||5e3,this.maxRetry=(null==r?void 0:r.maxRetry)||6e4,this.baseURL=(null==r?void 0:r.baseURL)||"https://api.airtable.com/v0"}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,