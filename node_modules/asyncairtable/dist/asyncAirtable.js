/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 300:
/***/ ((module, exports) => {



// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports["default"] = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {

// UNUSED EXPORTS: AsyncAirtable, CREATED_TIME, ERROR, LAST_MODIFIED_TIME, NOW, RECORD_ID, TODAY

;// CONCATENATED MODULE: ./src/arrayFunctions.ts

const arrayFunctions = {
    $arrayCompact: (val) => {
        return `ARRAYCOMPACT(${queryBuilder(val)})`;
    },
    $arrayFlatten: (val) => {
        return `ARRAYFLATTEN(${queryBuilder(val)})`;
    },
    $arrayUnique: (val) => {
        return `ARRAYUNIQUE(${queryBuilder(val)})`;
    },
    $arrayJoin: (val, seperator = ',') => {
        return `ARRAYJOIN(${queryBuilder(val)}, ${queryBuilder(seperator)})`;
    },
};

;// CONCATENATED MODULE: ./src/baseHandlers.ts
const booleanHandler = (bool) => {
    return bool ? 'TRUE()' : 'FALSE()';
};
const baseHandler = (val) => {
    if (val === null) {
        return 'BLANK()';
    }
    switch (typeof val) {
        case 'number':
            return `${val}`;
        case 'string':
            return `'${val}'`;
        case 'boolean':
            return booleanHandler(val);
    }
};

;// CONCATENATED MODULE: ./src/typeCheckers.ts
const checkProperty = (obj, prop, typeCheck) => Object.prototype.hasOwnProperty.call(obj, prop) &&
    (typeCheck !== undefined ? typeCheck(obj[prop]) : true);
const isQueryObject = (item) => {
    if (item === undefined)
        throw new Error('Missing Query Object');
    return item !== null && typeof item === 'object' && !Array.isArray(item);
};
const isTextArg = (item) => isStringOrFieldNameObject(item) || isQueryObject(item);
const isNumArg = (item) => isNumOrFieldNameObject(item) || isQueryObject(item);
const isBoolArg = (item) => isBoolOrFieldNameObject(item) || isQueryObject(item);
const isQueryObjectArray = (arr) => arr instanceof Array && arr.every((v) => isQueryObject(v));
const isTextArgArray = (arr) => arr instanceof Array && arr.every((v) => isTextArg(v));
const isNumArgArray = (arr) => arr instanceof Array && arr.every((v) => isNumArg(v));
const isJoinArgs = (arg) => !!(isQueryObject(arg) && arg.val);
const isFieldNameObject = (val) => isQueryObject(val) && typeof val.$fieldName === 'string';
const isString = (arg) => typeof arg === 'string';
const isStringArray = (arg) => Array.isArray(arg) && arg.every((s) => typeof s === 'string');
const isStringOrFieldNameObject = (val) => isString(val) || isFieldNameObject(val);
const isNumOrFieldNameObject = (val) => typeof val === 'number' || isFieldNameObject(val);
const isBoolOrFieldNameObject = (val) => typeof val === 'boolean' || isFieldNameObject(val);
const isTextSearchArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'stringToFind', isTextArg) &&
    checkProperty(arg, 'whereToSearch', isTextArg) &&
    (checkProperty(arg, 'index') ? isNumArg(arg.index) : true));
const isTextReplaceArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'startChar', isNumArg) &&
    checkProperty(arg, 'numChars', isNumArg) &&
    checkProperty(arg, 'replacement', isTextArg));
const isTextSubArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'oldText', isTextArg) &&
    checkProperty(arg, 'newText', isTextArg) &&
    (checkProperty(arg, 'index') ? isNumArg(arg.index) : true));
const isTextMidArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'whereToStart', isNumArg) &&
    checkProperty(arg, 'num', isNumArg));
const isTextDoubleArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'num', isNumArg));
const allIndexesValid = (arr) => arr.every((e) => e !== undefined && e !== null);
const isBaseField = (item) => (typeof item !== 'object' && typeof item !== 'function') || item === null;
const isIfArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'expression', isBoolArg) &&
    checkProperty(arg, 'ifTrue') &&
    checkProperty(arg, 'ifFalse'));
const isSwitchArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'expression', isBoolArg) &&
    checkProperty(arg, 'cases') &&
    arg.cases instanceof Array &&
    arg.cases.every((c) => isQueryObject(c) &&
        checkProperty(c, 'switchCase') &&
        checkProperty(c, 'val')) &&
    checkProperty(arg, 'defaultVal'));
const isRegexArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'regex', isTextArg));
const isRegexReplaceArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'regex', isTextArg) &&
    checkProperty(arg, 'replacement', isTextArg));
const isCeilFloorArg = (arg) => !!(isQueryObject(arg) && checkProperty(arg, 'val', isNumArg)) &&
    (checkProperty(arg, 'significance') ? isNumArg(arg.significance) : true);
const isModArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'val', isNumArg) &&
    checkProperty(arg, 'divisor', isNumArg));
const isPowerArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'base', isNumArg) &&
    checkProperty(arg, 'power', isNumArg));
const isRoundArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'val', isNumArg) &&
    checkProperty(arg, 'precision', isNumArg));
const isLogArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'num') &&
    checkProperty(arg, 'base')
    ? isNumArg(arg.base)
    : true);
const isFunc = (arg) => !!(arg && typeof arg === 'function' && typeof arg() === 'string');
const hasDateArg = (arg) => !!(isQueryObject(arg) && checkProperty(arg, 'date', isTextArg));
const hasDoubleDateArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'date1', isTextArg) &&
    checkProperty(arg, 'date2', isTextArg));
const isDateAddArg = (arg) => !!(hasDateArg(arg) &&
    checkProperty(arg, 'count', isNumArg) &&
    checkProperty(arg, 'units', isString));
const isDateDiffArg = (arg) => !!(hasDoubleDateArg(arg) && checkProperty(arg, 'units', isString));
const isDateSameArg = (arg) => !!(hasDoubleDateArg(arg) && checkProperty(arg, 'units')
    ? isString(arg)
    : true);
const isDateFormatArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'format', isTextArg));
const isDateParseArg = (arg) => !!(hasDateArg(arg) &&
    (checkProperty(arg, 'format') ? isTextArg(arg.format) : true) &&
    checkProperty(arg, 'locale')
    ? isTextArg(arg.locale)
    : true);
const isDateWeekArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'start')
    ? isTextArg(arg.format)
    : true);
const isDateWorkDayArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'holidays')
    ? isTextArgArray(arg.format)
    : true);
const isDateWorkDayDiffArg = (arg) => !!(hasDateArg(arg) &&
    checkProperty(arg, 'numDays', isNumArg) &&
    checkProperty(arg, 'holidays')
    ? isTextArgArray(arg.format)
    : true);

;// CONCATENATED MODULE: ./src/logicalFunctions.ts


const arrayArgFuncs = {
    $and: (args) => `AND(${queryBuilder(args)})`,
    $or: (args) => `OR(${queryBuilder(args)})`,
    $xor: (args) => `XOR(${queryBuilder(args)})`,
};
const expressionFuncs = {
    $not: (expression) => `NOT(${queryBuilder(expression)})`,
    $isError: (expression) => `ISERROR(${queryBuilder(expression)})`,
};
const ifFunc = {
    $if: ({ expression, ifTrue, ifFalse }) => `IF(${queryBuilder(expression)}, ${queryBuilder(ifTrue)}, ${queryBuilder(ifFalse)})`,
};
const switchFunc = {
    $switch: ({ expression, cases, defaultVal }) => `SWITCH(${queryBuilder(expression)}, ${cases
        .slice(0)
        .map(({ switchCase, val }) => `${queryBuilder(switchCase)}, ${queryBuilder(val)}`)
        .join(', ')}, ${queryBuilder(defaultVal)})`,
};
const logicalFunctions = Object.assign(Object.assign(Object.assign(Object.assign({}, arrayArgFuncs), expressionFuncs), ifFunc), switchFunc);
const handleLogicalFunc = (key, val) => {
    if (key in arrayArgFuncs && isQueryObjectArray(val)) {
        return arrayArgFuncs[key](val);
    }
    else if (key in expressionFuncs && isQueryObject(val)) {
        return expressionFuncs[key](val);
    }
    else if (key in ifFunc && isIfArgs(val)) {
        return ifFunc[key](val);
    }
    else if (key in switchFunc && isSwitchArgs(val)) {
        return switchFunc[key](val);
    }
    throw handleError({ key, val });
};

;// CONCATENATED MODULE: ./src/buildExpression.ts

const operators = [
    { $eq: '=' },
    { $neq: '!=' },
    { $gt: '>' },
    { $gte: '>=' },
    { $lt: '<' },
    { $lte: '<=' },
    { $add: '+' },
    { $sub: '-' },
    { $multi: '*' },
    { $div: '/' },
];
const buildExpression = (obj, op) => {
    if (typeof obj !== 'object' || Array.isArray(obj))
        throw new Error('Missing or Invalid Comparison Object');
    if (typeof op !== 'string' &&
        !operators.map((o) => Object.values(o)[0]).includes(op))
        throw new Error('Missing or Invalid Comparison Operator');
    const keys = Object.keys(obj);
    const expressionMapper = (k, i) => {
        const val = queryBuilder(obj[k]);
        return `{${k}} ${op} ${val}${i < keys.length - 1 ? ', ' : ''}`;
    };
    const exp = `${keys.map(expressionMapper).join('')}`;
    return keys.length > 1 ? `AND(${exp})` : exp;
};

;// CONCATENATED MODULE: ./src/logicalOperators.ts

const logicalOperators = {
    $gt: (val) => {
        return buildExpression(val, '>');
    },
    $lt: (val) => {
        return buildExpression(val, '<');
    },
    $gte: (val) => {
        return buildExpression(val, '>=');
    },
    $lte: (val) => {
        return buildExpression(val, '<=');
    },
    $eq: (val) => {
        return buildExpression(val, '=');
    },
    $neq: (val) => {
        return buildExpression(val, '!=');
    },
};

;// CONCATENATED MODULE: ./src/textFunctions.ts


const textSearchFunctions = {
    $find: ({ stringToFind, whereToSearch, index }) => `FIND(${queryBuilder(stringToFind)}, ${queryBuilder(whereToSearch)}, ${index !== null && index !== void 0 ? index : 0})`,
    $search: ({ stringToFind, whereToSearch, index }) => `SEARCH(${queryBuilder(stringToFind)}, ${queryBuilder(whereToSearch)}, ${index !== null && index !== void 0 ? index : 0})`,
};
const textReplacementFunction = {
    $replace: ({ text, startChar, numChars, replacement }) => `REPLACE(${queryBuilder(text)}, ${queryBuilder(startChar)}, ${queryBuilder(numChars)}, ${queryBuilder(replacement)})`,
};
const textSubstituteFunction = {
    $substitute: ({ text, oldText, newText, index }) => `SUBSTITUTE(${queryBuilder(text)}, ${queryBuilder(oldText)}, ${queryBuilder(newText)}, ${index !== null && index !== void 0 ? index : 0})`,
};
const textConcatFunction = {
    $concatenate: (args) => `CONCATENATE(${args.map((a) => queryBuilder(a)).join(', ')})`,
};
const textDoubleArgumentFunctions = {
    $left: ({ text, num }) => `LEFT(${queryBuilder(text)}, ${queryBuilder(num)})`,
    $right: ({ text, num }) => `RIGHT(${queryBuilder(text)}, ${queryBuilder(num)})`,
    $rept: ({ text, num }) => `REPT(${queryBuilder(text)}, ${queryBuilder(num)})`,
};
const textMidFunction = {
    $mid: ({ text, whereToStart, num }) => `MID(${queryBuilder(text)}, ${queryBuilder(whereToStart)}, ${queryBuilder(num)})`,
};
const textSingleArgumentFunctions = {
    $encodeUrlComponent: (str) => `ENCODE_URL_COMPONENT(${queryBuilder(str)})`,
    $len: (str) => `LEN(${queryBuilder(str)})`,
    $lower: (str) => `LOWER(${queryBuilder(str)})`,
    $trim: (str) => `TRIM(${queryBuilder(str)})`,
    $upper: (str) => `UPPER(${queryBuilder(str)})`,
};
const textFunctions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, textSearchFunctions), textConcatFunction), textMidFunction), textReplacementFunction), textSubstituteFunction), textDoubleArgumentFunctions), textSingleArgumentFunctions);
const handleTextFunc = (key, val) => {
    if (key in textSearchFunctions && isTextSearchArgs(val)) {
        return textSearchFunctions[key](val);
    }
    else if (key in textConcatFunction && isTextArgArray(val)) {
        return textConcatFunction[key](val);
    }
    else if (key in textMidFunction && isTextMidArgs(val)) {
        return textMidFunction[key](val);
    }
    else if (key in textReplacementFunction && isTextReplaceArgs(val)) {
        return textReplacementFunction[key](val);
    }
    else if (key in textSubstituteFunction && isTextSubArgs(val)) {
        return textSubstituteFunction[key](val);
    }
    else if (key in textDoubleArgumentFunctions && isTextDoubleArg(val)) {
        return textDoubleArgumentFunctions[key](val);
    }
    else if (key in textSingleArgumentFunctions &&
        (isStringOrFieldNameObject(val) || isQueryObject(val))) {
        return textSingleArgumentFunctions[key](val);
    }
    throw handleError({ key, val });
};

;// CONCATENATED MODULE: ./src/regexFunctions.ts

const regexFunctions = {
    $regexMatch: ({ text, regex }) => `REGEX_MATCH(${queryBuilder(text)}, ${queryBuilder(regex)})`,
    $regexExtract: ({ text, regex }) => `REGEX_EXTRACT(${queryBuilder(text)}, ${queryBuilder(regex)})`,
};
const regexReplaceFunction = {
    $regexReplace: ({ text, regex, replacement }) => `REGEX_REPLACE(${queryBuilder(text)}, ${queryBuilder(regex)}, ${queryBuilder(replacement)})`,
};

;// CONCATENATED MODULE: ./src/numericFunctions.ts



const singleArgNumFunctions = {
    $abs: (arg) => `ABS(${queryBuilder(arg)})`,
    $even: (arg) => `EVEN(${queryBuilder(arg)})`,
    $exp: (arg) => `EXP(${queryBuilder(arg)})`,
    $int: (arg) => `INT(${queryBuilder(arg)})`,
    $odd: (arg) => `ODD(${queryBuilder(arg)})`,
    $sqrt: (arg) => `SQRT(${queryBuilder(arg)})`,
};
const arrayArgNumFunctions = {
    $avg: (arg) => `AVERAGE(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $count: (arg) => `COUNT(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $counta: (arg) => `COUNTA(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $countAll: (arg) => `COUNTALL(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $max: (arg) => `MAX(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $min: (arg) => `MIN(${arg.map((a) => queryBuilder(a)).join(', ')})`,
    $sum: (arg) => `SUM(${arg.map((a) => queryBuilder(a)).join(', ')})`,
};
const ceilFloorNumFunctions = {
    $ceil: ({ val, significance }) => `CEILING(${queryBuilder(val)}, ${queryBuilder(significance !== null && significance !== void 0 ? significance : 1)})`,
    $floor: ({ val, significance }) => `FLOOR(${queryBuilder(val)}, ${queryBuilder(significance !== null && significance !== void 0 ? significance : 1)})`,
};
const logNumFunction = {
    $log: ({ num, base }) => `LOG(${queryBuilder(num)}, ${queryBuilder(base !== null && base !== void 0 ? base : 10)})`,
};
const modNumFunction = {
    $mod: ({ val, divisor }) => `MOD(${queryBuilder(val)}, ${queryBuilder(divisor)})`,
};
const powerNumFunction = {
    $pow: ({ base, power }) => `POWER(${queryBuilder(base)}, ${queryBuilder(power)})`,
};
const roundNumFunctions = {
    $round: ({ val, precision }) => `ROUND(${queryBuilder(val)}, ${queryBuilder(precision)})`,
    $roundDown: ({ val, precision }) => `ROUNDDOWN(${queryBuilder(val)}, ${queryBuilder(precision)})`,
    $roundUp: ({ val, precision }) => `ROUNDUP(${queryBuilder(val)}, ${queryBuilder(precision)})`,
};
const numericalFunctions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, singleArgNumFunctions), arrayArgNumFunctions), ceilFloorNumFunctions), logNumFunction), modNumFunction), powerNumFunction), roundNumFunctions);
const numericOperators = {
    $add: (arg) => buildExpression(arg, '+'),
    $sub: (arg) => buildExpression(arg, '-'),
    $multi: (arg) => buildExpression(arg, '*'),
    $div: (arg) => buildExpression(arg, '/'),
};
const handleNumericalFunc = (key, val) => {
    if (key in arrayArgNumFunctions && isNumArgArray(val)) {
        return arrayArgNumFunctions[key](val);
    }
    else if (key in singleArgNumFunctions && isNumArg(val)) {
        return singleArgNumFunctions[key](val);
    }
    else if (key in ceilFloorNumFunctions && isCeilFloorArg(val)) {
        return ceilFloorNumFunctions[key](val);
    }
    else if (key in logNumFunction && isLogArg(val)) {
        return logNumFunction[key](val);
    }
    else if (key in modNumFunction && isModArg(val)) {
        return modNumFunction[key](val);
    }
    else if (key in powerNumFunction && isPowerArg(val)) {
        return powerNumFunction[key](val);
    }
    else if (key in roundNumFunctions && isRoundArg(val)) {
        return roundNumFunctions[key](val);
    }
    throw handleError({ key, val });
};

;// CONCATENATED MODULE: ./src/queryBuilder.ts








const operatorFunctions = Object.assign(Object.assign({}, logicalOperators), numericOperators);
const handleError = (arg) => new Error(`Invalid Query Object, ${JSON.stringify(arg)}`);
const queryBuilder = (arg) => {
    if (arg !== undefined) {
        if (isFunc(arg) && !isBaseField(arg) && !isQueryObject(arg)) {
            return arg();
        }
        if (isBaseField(arg)) {
            return baseHandler(arg);
        }
        if (arg instanceof Array) {
            const str = arg.map((a) => queryBuilder(a)).join(', ');
            return str.trim();
        }
        const keys = Object.keys(arg);
        const vals = Object.values(arg);
        if (keys.length > 1 &&
            allIndexesValid(vals) &&
            isQueryObjectArray(keys.map((k, i) => ({ [k]: vals[i] })))) {
            return logicalFunctions.$and(keys.map((k, i) => ({ [k]: vals[i] })));
        }
        const key = keys[0];
        if (arg[key] === undefined) {
            throw new Error('Invalid query');
        }
        const val = arg[key];
        if (val !== undefined) {
            if (key === '$fieldName' && isString(val)) {
                return `{${val}}`;
            }
            if (key === '$insert' && isString(val)) {
                return val;
            }
            if (key in logicalFunctions) {
                return handleLogicalFunc(key, val);
            }
            else if (key in textFunctions) {
                return handleTextFunc(key, val);
            }
            else if (key in numericalFunctions) {
                return handleNumericalFunc(key, val);
            }
            else if (key in regexFunctions && isRegexArgs(val)) {
                return regexFunctions[key](val);
            }
            else if (key in regexReplaceFunction && isRegexReplaceArgs(val)) {
                return regexFunctions[key](val);
            }
            else if (key in arrayFunctions) {
                if (isJoinArgs(val)) {
                    return arrayFunctions.$arrayJoin(val.val, val.separator);
                }
                else if (typeof val === 'string') {
                    return arrayFunctions[key](val);
                }
            }
            else if (isQueryObject(val)) {
                const valKeys = Object.keys(val);
                const subVals = Object.values(val);
                if (valKeys.length > 1 &&
                    allIndexesValid(subVals) &&
                    isQueryObjectArray(valKeys.map((k, i) => ({ [k]: subVals[i] }))) &&
                    subVals.every((v) => isQueryObject(v) || isBaseField(v))) {
                    if (valKeys.every((k) => k in logicalOperators)) {
                        return logicalFunctions.$and(valKeys.map((k, i) => ({
                            [key]: { [k]: subVals[i] },
                        })));
                    }
                    if (valKeys.every((k) => k in numericOperators)) {
                        return '';
                    }
                }
                const valKey = valKeys[0];
                const subVal = subVals[0];
                if (valKey in operatorFunctions &&
                    (isQueryObject(subVal) || isBaseField(subVal))) {
                    return operatorFunctions[valKey]({
                        [key]: subVal,
                    });
                }
            }
            else if (isQueryObject(val) || isBaseField(val)) {
                return operatorFunctions.$eq({ [key]: val });
            }
        }
    }
    throw handleError(arg);
};

;// CONCATENATED MODULE: ./src/buildOpts.ts

/* harmony default export */ const buildOpts = ((opts) => {
    if (Object.prototype.hasOwnProperty.call(opts, 'filterByFormula') &&
        Object.prototype.hasOwnProperty.call(opts, 'where'))
        throw new Error('Cannot use both where and filterByFormula as they accomplish the same thing');
    const params = Object.keys(opts)
        .map((key, i) => {
        /** @todo Find a better type than any for this */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const opt = opts[key];
        let formatted;
        if (Array.isArray(opt)) {
            formatted = opt
                .map((item, j) => {
                switch (typeof item) {
                    case 'object':
                        return Object.keys(item)
                            .map((subKey) => {
                            return `${encodeURIComponent(`${key}[${j}][${subKey}]`)}=${encodeURIComponent(item[subKey])}`;
                        })
                            .join('&');
                    case 'string':
                        return `${encodeURIComponent(key + '[]')}=${encodeURIComponent(item)}`;
                }
            })
                .join('&');
        }
        else {
            if (key === 'where') {
                formatted = `filterByFormula=${encodeURIComponent(queryBuilder(opt))}`;
            }
            else {
                formatted = `${key}=${encodeURIComponent(opt)}`;
            }
        }
        return i !== 0 ? `&${formatted}` : formatted;
    })
        .join('');
    return params;
});

;// CONCATENATED MODULE: ./src/checkArg.ts
/* harmony default export */ const checkArg = ((arg, name, type, required = true) => {
    if (arg === undefined && required)
        throw new Error(`Argument "${name}" is required.`);
    if (arg === undefined && !required)
        return;
    if (typeof arg !== type) {
        if (type === 'array' && Array.isArray(arg))
            return;
        throw new Error(`Incorrect data type on argument "${name}". Received "${typeof arg}": expected "${type}"`);
    }
});

;// CONCATENATED MODULE: ./src/checkError.ts
/* harmony default export */ const checkError = ((status) => status >= 300);

// EXTERNAL MODULE: ./node_modules/node-fetch/browser.js
var browser = __webpack_require__(300);
;// CONCATENATED MODULE: ./src/fetch.ts

/* harmony default export */ const fetch = (typeof window !== 'undefined'
    ? window.fetch.bind(window)
    : browser);

;// CONCATENATED MODULE: ./src/rateLimitHandler.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const rateLimitHandler = (url, opts, retryTimeout, maxRetry, key) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const retryRateLimit = (url, opts, retryTimeout, maxRetry, key) => {
            if (maxRetry && maxRetry < 1) {
                reject('Max timeout exceeded');
            }
            setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
                try {
                    const res = yield fetch(url, opts);
                    const data = yield res.json();
                    if (res.status === 429) {
                        retryRateLimit(url, opts, retryTimeout * 1.5, maxRetry - retryTimeout, key);
                    }
                    else {
                        resolve(data);
                    }
                }
                catch (err) {
                    reject(err);
                }
            }), retryTimeout);
        };
        retryRateLimit(url, opts, retryTimeout, maxRetry, key);
    });
});
/* harmony default export */ const src_rateLimitHandler = (rateLimitHandler);

;// CONCATENATED MODULE: ./src/http.ts
var http_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const request = ({ endpoint, options, instance, pageHandler, }) => http_awaiter(void 0, void 0, void 0, function* () {
    try {
        const res = yield fetch(endpoint, options);
        const body = yield res.json();
        if (checkError(res.status)) {
            if (res.status !== 429) {
                throw new Error(JSON.stringify(body));
            }
            if (instance.retryOnRateLimit) {
                if (!pageHandler || pageHandler.index + 1 === pageHandler.page) {
                    const limit = yield src_rateLimitHandler(endpoint, options !== null && options !== void 0 ? options : {}, instance.retryTimeout, instance.maxRetry);
                    return limit;
                }
            }
        }
        return body;
    }
    catch (err) {
        throw new Error(err);
    }
});

;// CONCATENATED MODULE: ./src/asyncAirtable.ts
var asyncAirtable_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const validOptions = [
    'fields',
    'filterByFormula',
    'maxRecords',
    'pageSize',
    'sort',
    'view',
    'where',
];
/**
 * The main AsyncAirtable class.
 */
class AsyncAirtable {
    /**
     * Creates a new instance of the AsyncAirtable library.
     * @param apiKey The API Key from AirTable
     * @param base The base id from AirTable
     * @param config The config to use for this instance of AsyncAirtable
     */
    constructor(apiKey, base, config) {
        /**
         * Select record(s) from the specified table.
         * @param table Table name
         * @param options Options object, used to filter records
         * @param page Used to get a specific page of records
         * @returns
         * @async
         */
        this.select = (table, options, page) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(options, 'options', 'object', false);
                checkArg(page, 'page', 'number', false);
                const url = `${this.baseURL}/${this.base}/${table}`;
                const opts = options ? Object.assign({}, options) : {};
                Object.keys(opts).forEach((option) => {
                    if (!validOptions.includes(option)) {
                        throw new Error(`Invalid option: ${option}`);
                    }
                });
                let offset = '';
                let data = [];
                if (page) {
                    for (let i = 0; i < page; i++) {
                        if (offset) {
                            opts.offset = offset;
                        }
                        try {
                            const body = yield request({
                                endpoint: `${url}?${buildOpts(opts)}`,
                                options: { headers: { Authorization: `Bearer ${this.apiKey}` } },
                                instance: this,
                                pageHandler: {
                                    index: i,
                                    page: page,
                                },
                            });
                            if (i + 1 === page) {
                                return body.records;
                            }
                            offset = body.offset;
                        }
                        catch (err) {
                            throw new Error(err);
                        }
                    }
                }
                else {
                    let done = false;
                    while (!done) {
                        if (offset) {
                            opts.offset = offset;
                        }
                        try {
                            const body = yield request({
                                endpoint: `${url}?${buildOpts(opts)}`,
                                options: {
                                    headers: { Authorization: `Bearer ${this.apiKey}` },
                                },
                                instance: this,
                            });
                            data = data.concat(body.records);
                            offset = body.offset;
                            if (!body.offset) {
                                done = true;
                            }
                        }
                        catch (err) {
                            throw new Error(err);
                        }
                    }
                }
                return data;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Finds a record on the specified table.
         * @param table Table name
         * @param id Airtable record ID
         * @returns
         * @async
         */
        this.find = (table, id) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(id, 'id', 'string');
                const url = `${this.baseURL}/${this.base}/${table}/${id}`;
                const data = yield request({
                    endpoint: url,
                    options: {
                        headers: { Authorization: `Bearer ${this.apiKey}` },
                    },
                    instance: this,
                });
                return data;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Creates a new record on the specified table.
         * @param table - Table name
         * @param record - Record object, used to structure data for insert
         * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
         * @returns
         * @async
         */
        this.createRecord = (table, record, typecast) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(record, 'record', 'object');
                checkArg(typecast, 'typecast', 'boolean', false);
                const url = `${this.baseURL}/${this.base}/${table}`;
                const body = { fields: record };
                if (typecast !== undefined) {
                    body.typecast = typecast;
                }
                const data = yield request({
                    endpoint: url,
                    instance: this,
                    options: {
                        method: 'post',
                        body: JSON.stringify(body),
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json',
                        },
                    },
                });
                return data;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Updates a record on the specified table.
         * @param table - Table name
         * @param record - Record object, used to update data within a specific record
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.updateRecord = (table, record, opts) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(record, 'record', 'object');
                if (opts) {
                    checkArg(opts.destructive, 'opts.desctructive', 'boolean');
                    checkArg(opts.typecast, 'opts.typecast', 'boolean', false);
                }
                const url = `${this.baseURL}/${this.base}/${table}/${record.id}`;
                const body = { fields: record.fields };
                if ((opts === null || opts === void 0 ? void 0 : opts.typecast) !== undefined) {
                    body.typecast = opts === null || opts === void 0 ? void 0 : opts.typecast;
                }
                const data = yield request({
                    endpoint: url,
                    instance: this,
                    options: {
                        method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                        body: JSON.stringify(body),
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json',
                        },
                    },
                });
                return data;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Deletes a record from the specified table.
         * @param table - Table name
         * @param id - Airtable record ID
         * @returns
         * @async
         */
        this.deleteRecord = (table, id) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(id, 'id', 'string');
                const url = `${this.baseURL}/${this.base}/${table}/${id}`;
                const data = yield request({
                    endpoint: url,
                    instance: this,
                    options: {
                        method: 'delete',
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                        },
                    },
                });
                return data;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Creates multiple new records on the specified table.
         * @param table - Table name
         * @param records - An array of Record objects
         * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
         * @returns
         * @async
         */
        this.bulkCreate = (table, records, typecast) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(records, 'records', 'array');
                checkArg(typecast, 'typecast', 'boolean', false);
                const url = `${this.baseURL}/${this.base}/${table}`;
                const body = {
                    records: records.map((record) => ({
                        fields: record,
                    })),
                };
                if (typecast !== undefined) {
                    body.typecast = typecast;
                }
                const data = yield request({
                    endpoint: url,
                    options: {
                        method: 'post',
                        body: JSON.stringify(body),
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json',
                        },
                    },
                    instance: this,
                });
                return data.records;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Updates multiple records on the specified table
         * @param table - Table name
         * @param records - An array of Record objects
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.bulkUpdate = (table, records, opts) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(records, 'records', 'array');
                if (opts) {
                    checkArg(opts.destructive, 'opts.desctructive', 'boolean', false);
                    checkArg(opts.typecast, 'opts.typecast', 'boolean', false);
                }
                const url = `${this.baseURL}/${this.base}/${table}`;
                const body = { records };
                if ((opts === null || opts === void 0 ? void 0 : opts.typecast) !== undefined) {
                    body.typecast = opts === null || opts === void 0 ? void 0 : opts.typecast;
                }
                const data = yield request({
                    endpoint: url,
                    options: {
                        method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                        body: JSON.stringify(body),
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json',
                        },
                    },
                    instance: this,
                });
                return data.records;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Deletes multiple records from the specified table
         * @param table - Table name
         * @param ids - Array of Airtable record IDs
         * @returns
         * @async
         */
        this.bulkDelete = (table, ids) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            try {
                checkArg(table, 'table', 'string');
                checkArg(ids, 'ids', 'array');
                let query = '';
                ids.forEach((id, i) => {
                    if (i !== 0) {
                        query = `${query}&records[]=${id}`;
                    }
                    else {
                        query = `records[]=${id}`;
                    }
                });
                const url = `${this.baseURL}/${this.base}/${table}?${encodeURI(query)}`;
                const data = yield request({
                    endpoint: url,
                    options: {
                        method: 'delete',
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                        },
                    },
                    instance: this,
                });
                return data.records;
            }
            catch (err) {
                throw new Error(err);
            }
        });
        /**
         * Checks if a record exists, and if it does updates it, if not creates a new record.
         * @param table - Table name
         * @param filterString - The filter formula string used to check for a record
         * @param record - Record object used to either update or create a record
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.upsertRecord = (table, filterString, record, opts) => asyncAirtable_awaiter(this, void 0, void 0, function* () {
            checkArg(table, 'table', 'string');
            checkArg(filterString, 'filterString', 'string');
            checkArg(record, 'record', 'object');
            if (opts) {
                checkArg(opts.destructive, 'opts.desctructive', 'boolean', false);
                checkArg(opts.typecast, 'opts.typecast', 'boolean', false);
            }
            const exists = yield this.select(table, { filterByFormula: filterString });
            if (!exists[0]) {
                return yield this.createRecord(table, record, opts === null || opts === void 0 ? void 0 : opts.typecast);
            }
            else {
                return yield this.updateRecord(table, {
                    id: exists[0].id,
                    fields: record,
                }, opts);
            }
        });
        if (!apiKey)
            throw new Error('API Key is required.');
        if (!base)
            throw new Error('Base ID is required.');
        this.apiKey = apiKey;
        this.base = base;
        this.retryOnRateLimit = (config === null || config === void 0 ? void 0 : config.retryOnRateLimit) || true;
        this.retryTimeout = (config === null || config === void 0 ? void 0 : config.retryTimeout) || 5000;
        this.maxRetry = (config === null || config === void 0 ? void 0 : config.maxRetry) || 60000;
        this.baseURL = (config === null || config === void 0 ? void 0 : config.baseURL) || 'https://api.airtable.com/v0';
    }
}
if (typeof window !== 'undefined') {
    window.AsyncAirtable = AsyncAirtable;
}
const CREATED_TIME = () => 'CREATED_TIME()';
const NOW = () => 'NOW()';
const TODAY = () => 'TODAY()';
const ERROR = () => 'ERROR()';
const LAST_MODIFIED_TIME = () => 'LAST_MODIFIED_TIME()';
const RECORD_ID = () => 'RECORD_ID()';

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,