var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import checkError from './checkError';
import fetch from './fetch';
import rateLimitHandler from './rateLimitHandler';
export const request = ({ endpoint, options, instance, pageHandler, }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const res = yield fetch(endpoint, options);
        const body = yield res.json();
        if (checkError(res.status)) {
            if (res.status !== 429) {
                throw new Error(JSON.stringify(body));
            }
            if (instance.retryOnRateLimit) {
                if (!pageHandler || pageHandler.index + 1 === pageHandler.page) {
                    const limit = yield rateLimitHandler(endpoint, options !== null && options !== void 0 ? options : {}, instance.retryTimeout, instance.maxRetry);
                    return limit;
                }
            }
        }
        return body;
    }
    catch (err) {
        throw new Error(err);
    }
});
//# sourceMappingURL=http.js.map