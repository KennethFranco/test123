import { handleError, queryBuilder } from './queryBuilder';
import { isQueryObjectArray, isQueryObject, isIfArgs, isSwitchArgs, } from './typeCheckers';
export const arrayArgFuncs = {
    $and: (args) => `AND(${queryBuilder(args)})`,
    $or: (args) => `OR(${queryBuilder(args)})`,
    $xor: (args) => `XOR(${queryBuilder(args)})`,
};
export const expressionFuncs = {
    $not: (expression) => `NOT(${queryBuilder(expression)})`,
    $isError: (expression) => `ISERROR(${queryBuilder(expression)})`,
};
export const ifFunc = {
    $if: ({ expression, ifTrue, ifFalse }) => `IF(${queryBuilder(expression)}, ${queryBuilder(ifTrue)}, ${queryBuilder(ifFalse)})`,
};
export const switchFunc = {
    $switch: ({ expression, cases, defaultVal }) => `SWITCH(${queryBuilder(expression)}, ${cases
        .slice(0)
        .map(({ switchCase, val }) => `${queryBuilder(switchCase)}, ${queryBuilder(val)}`)
        .join(', ')}, ${queryBuilder(defaultVal)})`,
};
export const logicalFunctions = Object.assign(Object.assign(Object.assign(Object.assign({}, arrayArgFuncs), expressionFuncs), ifFunc), switchFunc);
export const handleLogicalFunc = (key, val) => {
    if (key in arrayArgFuncs && isQueryObjectArray(val)) {
        return arrayArgFuncs[key](val);
    }
    else if (key in expressionFuncs && isQueryObject(val)) {
        return expressionFuncs[key](val);
    }
    else if (key in ifFunc && isIfArgs(val)) {
        return ifFunc[key](val);
    }
    else if (key in switchFunc && isSwitchArgs(val)) {
        return switchFunc[key](val);
    }
    throw handleError({ key, val });
};
//# sourceMappingURL=logicalFunctions.js.map