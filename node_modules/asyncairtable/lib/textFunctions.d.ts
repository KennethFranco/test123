import { QueryField, TextConcatFunctions, TextDoubleArgumentFunctions, TextMidFunction, TextReplaceFunctions, TextSearchFunctions, TextSingleArgumentFunctions, TextSubFunctions } from './types';
export declare const textSearchFunctions: TextSearchFunctions;
export declare const textReplacementFunction: TextReplaceFunctions;
export declare const textSubstituteFunction: TextSubFunctions;
export declare const textConcatFunction: TextConcatFunctions;
export declare const textDoubleArgumentFunctions: TextDoubleArgumentFunctions;
export declare const textMidFunction: TextMidFunction;
export declare const textSingleArgumentFunctions: TextSingleArgumentFunctions;
export declare const textFunctions: {
    [x: string]: ((arg: import("./types").TextSearchArgs) => string) | ((args: import("./types").TextArg[]) => string) | ((arg: import("./types").TextMidArgs) => string) | ((arg: import("./types").TextReplaceArgs) => string) | ((arg: import("./types").TextSubArgs) => string) | ((arg: import("./types").TextDoubleArg) => string) | ((arg: import("./types").TextArg) => string);
    $encodeUrlComponent: (arg: import("./types").TextArg) => string;
    $len: (arg: import("./types").TextArg) => string;
    $lower: (arg: import("./types").TextArg) => string;
    $trim: (arg: import("./types").TextArg) => string;
    $upper: (arg: import("./types").TextArg) => string;
    $left: (arg: import("./types").TextDoubleArg) => string;
    $right: (arg: import("./types").TextDoubleArg) => string;
    $rept: (arg: import("./types").TextDoubleArg) => string;
    $substitute: (arg: import("./types").TextSubArgs) => string;
    $replace: (arg: import("./types").TextReplaceArgs) => string;
    $mid: (arg: import("./types").TextMidArgs) => string;
    $concatenate: (args: import("./types").TextArg[]) => string;
    $find: (arg: import("./types").TextSearchArgs) => string;
    $search: (arg: import("./types").TextSearchArgs) => string;
};
export declare const handleTextFunc: (key: string, val: QueryField) => string;
