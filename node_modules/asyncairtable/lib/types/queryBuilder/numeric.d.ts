import { BaseFieldType, NumArg, QueryObject } from '../queryBuilder';
/** @ignore */
export declare type NumericalOpObject = Record<string, BaseFieldType | QueryObject>;
/** @ignore */
declare type NumericalOpFunction = (vals: NumericalOpObject) => string;
export declare type CeilFloorArg = {
    val: NumArg;
    significance?: NumArg;
};
export declare type LogArg = {
    num: NumArg;
    base?: NumArg;
};
export declare type ModArg = {
    val: NumArg;
    divisor: NumArg;
};
export declare type PowerArg = {
    base: NumArg;
    power: NumArg;
};
export declare type RoundArg = {
    val: NumArg;
    precision: NumArg;
};
export declare type SingleArgNumFunc = (arg: NumArg) => string;
export declare type ArrayArgNumFunc = (arg: NumArg[]) => string;
export declare type CeilFloorNumFunc = (arg: CeilFloorArg) => string;
export declare type LogNumFunc = (arg: LogArg) => string;
export declare type ModNumFunc = (arg: ModArg) => string;
export declare type PowerNumFunc = (arg: PowerArg) => string;
export declare type RoundNumFunc = (arg: RoundArg) => string;
export interface SingleArgNumFunctions extends Record<string, SingleArgNumFunc> {
    $abs: SingleArgNumFunc;
    $even: SingleArgNumFunc;
    $exp: SingleArgNumFunc;
    $int: SingleArgNumFunc;
    $odd: SingleArgNumFunc;
    $sqrt: SingleArgNumFunc;
}
export interface ArrayArgNumFunctions extends Record<string, ArrayArgNumFunc> {
    $avg: ArrayArgNumFunc;
    $count: ArrayArgNumFunc;
    $counta: ArrayArgNumFunc;
    $countAll: ArrayArgNumFunc;
    $max: ArrayArgNumFunc;
    $min: ArrayArgNumFunc;
    $sum: ArrayArgNumFunc;
}
export interface CeilFloorNumFunctions extends Record<string, CeilFloorNumFunc> {
    $ceil: CeilFloorNumFunc;
    $floor: CeilFloorNumFunc;
}
export interface LogNumFunction extends Record<string, LogNumFunc> {
    $log: LogNumFunc;
}
export interface ModNumFunction extends Record<string, ModNumFunc> {
    $mod: ModNumFunc;
}
export interface PowerNumFunction extends Record<string, PowerNumFunc> {
    $pow: PowerNumFunc;
}
export interface RoundNumFunctions extends Record<string, RoundNumFunc> {
    $round: RoundNumFunc;
    $roundDown: RoundNumFunc;
    $roundUp: RoundNumFunc;
}
export interface NumericOperators extends Record<string, NumericalOpFunction> {
    $add: NumericalOpFunction;
    $sub: NumericalOpFunction;
    $multi: NumericalOpFunction;
    $div: NumericalOpFunction;
}
export {};
