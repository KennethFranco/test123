import { QueryField } from './types';
import { ArrayArgNumFunctions, CeilFloorNumFunctions, LogNumFunction, ModNumFunction, NumericOperators, PowerNumFunction, RoundNumFunctions, SingleArgNumFunctions } from './types/queryBuilder/numeric';
export declare const singleArgNumFunctions: SingleArgNumFunctions;
export declare const arrayArgNumFunctions: ArrayArgNumFunctions;
export declare const ceilFloorNumFunctions: CeilFloorNumFunctions;
export declare const logNumFunction: LogNumFunction;
export declare const modNumFunction: ModNumFunction;
export declare const powerNumFunction: PowerNumFunction;
export declare const roundNumFunctions: RoundNumFunctions;
export declare const numericalFunctions: {
    [x: string]: import("./types/queryBuilder/numeric").SingleArgNumFunc | import("./types/queryBuilder/numeric").ArrayArgNumFunc | import("./types/queryBuilder/numeric").CeilFloorNumFunc | import("./types/queryBuilder/numeric").LogNumFunc | import("./types/queryBuilder/numeric").ModNumFunc | import("./types/queryBuilder/numeric").PowerNumFunc | import("./types/queryBuilder/numeric").RoundNumFunc;
    $round: import("./types/queryBuilder/numeric").RoundNumFunc;
    $roundDown: import("./types/queryBuilder/numeric").RoundNumFunc;
    $roundUp: import("./types/queryBuilder/numeric").RoundNumFunc;
    $pow: import("./types/queryBuilder/numeric").PowerNumFunc;
    $mod: import("./types/queryBuilder/numeric").ModNumFunc;
    $log: import("./types/queryBuilder/numeric").LogNumFunc;
    $ceil: import("./types/queryBuilder/numeric").CeilFloorNumFunc;
    $floor: import("./types/queryBuilder/numeric").CeilFloorNumFunc;
    $avg: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $count: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $counta: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $countAll: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $max: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $min: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $sum: import("./types/queryBuilder/numeric").ArrayArgNumFunc;
    $abs: import("./types/queryBuilder/numeric").SingleArgNumFunc;
    $even: import("./types/queryBuilder/numeric").SingleArgNumFunc;
    $exp: import("./types/queryBuilder/numeric").SingleArgNumFunc;
    $int: import("./types/queryBuilder/numeric").SingleArgNumFunc;
    $odd: import("./types/queryBuilder/numeric").SingleArgNumFunc;
    $sqrt: import("./types/queryBuilder/numeric").SingleArgNumFunc;
};
export declare const numericOperators: NumericOperators;
export declare const handleNumericalFunc: (key: string, val: QueryField) => string;
