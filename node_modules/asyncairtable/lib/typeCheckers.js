const checkProperty = (obj, prop, typeCheck) => Object.prototype.hasOwnProperty.call(obj, prop) &&
    (typeCheck !== undefined ? typeCheck(obj[prop]) : true);
export const isQueryObject = (item) => {
    if (item === undefined)
        throw new Error('Missing Query Object');
    return item !== null && typeof item === 'object' && !Array.isArray(item);
};
export const isTextArg = (item) => isStringOrFieldNameObject(item) || isQueryObject(item);
export const isNumArg = (item) => isNumOrFieldNameObject(item) || isQueryObject(item);
export const isBoolArg = (item) => isBoolOrFieldNameObject(item) || isQueryObject(item);
export const isQueryObjectArray = (arr) => arr instanceof Array && arr.every((v) => isQueryObject(v));
export const isTextArgArray = (arr) => arr instanceof Array && arr.every((v) => isTextArg(v));
export const isNumArgArray = (arr) => arr instanceof Array && arr.every((v) => isNumArg(v));
export const isJoinArgs = (arg) => !!(isQueryObject(arg) && arg.val);
export const isFieldNameObject = (val) => isQueryObject(val) && typeof val.$fieldName === 'string';
export const isString = (arg) => typeof arg === 'string';
export const isStringArray = (arg) => Array.isArray(arg) && arg.every((s) => typeof s === 'string');
export const isStringOrFieldNameObject = (val) => isString(val) || isFieldNameObject(val);
export const isNumOrFieldNameObject = (val) => typeof val === 'number' || isFieldNameObject(val);
export const isBoolOrFieldNameObject = (val) => typeof val === 'boolean' || isFieldNameObject(val);
export const isTextSearchArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'stringToFind', isTextArg) &&
    checkProperty(arg, 'whereToSearch', isTextArg) &&
    (checkProperty(arg, 'index') ? isNumArg(arg.index) : true));
export const isTextReplaceArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'startChar', isNumArg) &&
    checkProperty(arg, 'numChars', isNumArg) &&
    checkProperty(arg, 'replacement', isTextArg));
export const isTextSubArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'oldText', isTextArg) &&
    checkProperty(arg, 'newText', isTextArg) &&
    (checkProperty(arg, 'index') ? isNumArg(arg.index) : true));
export const isTextMidArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'whereToStart', isNumArg) &&
    checkProperty(arg, 'num', isNumArg));
export const isTextDoubleArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'num', isNumArg));
export const allIndexesValid = (arr) => arr.every((e) => e !== undefined && e !== null);
export const isBaseField = (item) => (typeof item !== 'object' && typeof item !== 'function') || item === null;
export const isIfArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'expression', isBoolArg) &&
    checkProperty(arg, 'ifTrue') &&
    checkProperty(arg, 'ifFalse'));
export const isSwitchArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'expression', isBoolArg) &&
    checkProperty(arg, 'cases') &&
    arg.cases instanceof Array &&
    arg.cases.every((c) => isQueryObject(c) &&
        checkProperty(c, 'switchCase') &&
        checkProperty(c, 'val')) &&
    checkProperty(arg, 'defaultVal'));
export const isRegexArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'regex', isTextArg));
export const isRegexReplaceArgs = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'text', isTextArg) &&
    checkProperty(arg, 'regex', isTextArg) &&
    checkProperty(arg, 'replacement', isTextArg));
export const isCeilFloorArg = (arg) => !!(isQueryObject(arg) && checkProperty(arg, 'val', isNumArg)) &&
    (checkProperty(arg, 'significance') ? isNumArg(arg.significance) : true);
export const isModArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'val', isNumArg) &&
    checkProperty(arg, 'divisor', isNumArg));
export const isPowerArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'base', isNumArg) &&
    checkProperty(arg, 'power', isNumArg));
export const isRoundArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'val', isNumArg) &&
    checkProperty(arg, 'precision', isNumArg));
export const isLogArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'num') &&
    checkProperty(arg, 'base')
    ? isNumArg(arg.base)
    : true);
export const isFunc = (arg) => !!(arg && typeof arg === 'function' && typeof arg() === 'string');
export const hasDateArg = (arg) => !!(isQueryObject(arg) && checkProperty(arg, 'date', isTextArg));
export const hasDoubleDateArg = (arg) => !!(isQueryObject(arg) &&
    checkProperty(arg, 'date1', isTextArg) &&
    checkProperty(arg, 'date2', isTextArg));
export const isDateAddArg = (arg) => !!(hasDateArg(arg) &&
    checkProperty(arg, 'count', isNumArg) &&
    checkProperty(arg, 'units', isString));
export const isDateDiffArg = (arg) => !!(hasDoubleDateArg(arg) && checkProperty(arg, 'units', isString));
export const isDateSameArg = (arg) => !!(hasDoubleDateArg(arg) && checkProperty(arg, 'units')
    ? isString(arg)
    : true);
export const isDateFormatArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'format', isTextArg));
export const isDateParseArg = (arg) => !!(hasDateArg(arg) &&
    (checkProperty(arg, 'format') ? isTextArg(arg.format) : true) &&
    checkProperty(arg, 'locale')
    ? isTextArg(arg.locale)
    : true);
export const isDateWeekArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'start')
    ? isTextArg(arg.format)
    : true);
export const isDateWorkDayArg = (arg) => !!(hasDateArg(arg) && checkProperty(arg, 'holidays')
    ? isTextArgArray(arg.format)
    : true);
export const isDateWorkDayDiffArg = (arg) => !!(hasDateArg(arg) &&
    checkProperty(arg, 'numDays', isNumArg) &&
    checkProperty(arg, 'holidays')
    ? isTextArgArray(arg.format)
    : true);
//# sourceMappingURL=typeCheckers.js.map